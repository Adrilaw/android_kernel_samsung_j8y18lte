# Kidpentester-Nethunter-Kernel J8y18LTE (AOSP 11)

A Custom Kernel For Any Samsung Galaxy J8 running custom Android 11 ROM.

Compiled using Google GCC 4.9 Toolchain.

- URL: [Google GCC 4.9 Toolchain](https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9)
- XDA J8 Forum: [Unofficial Kali Nethunter Kernel for Samsung J8](https://xdaforums.com/t/unofficial-kali-nethunter-kernel-for-samsung-j8.4681465/)

## How to Use

### Prerequisites

Before starting, ensure you have the following:

- **Linux-Based OS** (e.g., Ubuntu, Kali Linux) for the build environment.
- **Required Packages**:
  ```bash
  sudo apt-get update
  sudo apt-get install git build-essential libncurses5-dev zlib1g-dev \
                       libssl-dev libelf-dev bison flex
# 1.Setup kernel
$ mkdir kernel
$ cd kernel
$ git clone -b lineage-18.1 https://github.com/Adrilaw/android_kernel_samsung_j8y18lte.git
$ cd android_kernel_samsung_j8y18lte
$ git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel
$ cd kali-nethunter-kernel
$ cp local.config.examples/local.config.allinone local.config
$ sudo ./build.sh

# 2.Building kernel
$ cd ../android_kernel_samsung_j8y18lte
$ export CROSS_COMPILE=/path/to/your/toolchain/bin/aarch64-linux-gnu-
$ export ARCH=arm64
$ export SUBARCH=arm64
$ make j8y18lte_defconfig
$ make menuconfig  # Follow the Nethunter kernel configuration guide.
$ make -j$(nproc)
$ cp arch/arm64/boot/Image.gz-dtb ../AnyKernel3

# 3.Getting kernel ready to flash
$ git clone https://github.com/osm0sis/AnyKernel3.git
$ cd AnyKernel3
$ sudo rm -r anykernel.sh
$ nano anykernel.sh put the follwoing in:
 
```bash
### AnyKernel3 Ramdisk Mod Script
## osm0sis @ xda-developers

### AnyKernel setup
# global properties
properties() { '
kernel.string=Nethunter kernel for Samsung J8 by xda-developers @Kidpentester
do.devicecheck=1
do.modules=0
do.systemless=1
do.cleanup=1
do.cleanuponabort=0
device.name1=j8y18lte
device.name2=j8y18lte/dd
device.name3=J810G
device.name4=J810GF
device.name5=J810F
device.name6=J810M
supported.versions=
supported.patchlevels=
supported.vendorpatchlevels=
'; } # end properties

### AnyKernel install
## boot files attributes
boot_attributes() {
set_perm_recursive 0 0 755 644 $RAMDISK/*;
set_perm_recursive 0 0 750 750 $RAMDISK/init* $RAMDISK/sbin;
} # end attributes

# boot shell variables
BLOCK=/dev/block/mmcblk0p25;
IS_SLOT_DEVICE=0;
RAMDISK_COMPRESSION=auto;
PATCH_VBMETA_FLAG=auto;

# import functions/variables and setup patching - see for reference (DO NOT REMOVE)
. tools/ak3-core.sh;

# boot install
dump_boot; # use split_boot to skip ramdisk unpack, e.g. for devices with init_boot ramdisk

# init.rc
backup_file init.rc;
replace_string init.rc "cpuctl cpu,timer_slack" "mount cgroup none /dev/cpuctl cpu" "mount cgroup none /dev/cpuctl cpu,timer_slack";

# init.tuna.rc
backup_file init.tuna.rc;
insert_line init.tuna.rc "nodiratime barrier=0" after "mount_all /fstab.tuna" "\tmount ext4 /dev/block/platform/omap/omap_hsmmc.0/by-name/userdata /data remount nosuid nodev noatime nodiratime barrier=0";
append_file init.tuna.rc "bootscript" init.tuna;

# fstab.tuna
backup_file fstab.tuna;
patch_fstab fstab.tuna /system ext4 options "noatime,barrier=1" "noatime,nodiratime,barrier=0";
patch_fstab fstab.tuna /cache ext4 options "barrier=1" "barrier=0,nomblk_io_submit";
patch_fstab fstab.tuna /data ext4 options "data=ordered" "nomblk_io_submit,data=writeback";
append_file fstab.tuna "usbdisk" fstab;

write_boot; # use flash_boot to skip ramdisk repack, e.g. for devices with init_boot ramdisk
## end boot install
```



